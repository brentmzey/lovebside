package love.bside.app.data.api

import love.bside.app.core.AppLogger
import love.bside.app.core.logDebug
import love.bside.app.core.logError
import love.bside.app.core.logInfo
import love.bside.app.core.Result

/**
 * Testing utilities for PocketBase integration
 */
object PocketBaseTestHelper {
    
    /**
     * Test connection to PocketBase
     */
    suspend fun testConnection(client: PocketBaseClient): Result<Boolean> {
        logInfo("üß™ Testing PocketBase connection...")
        
        return try {
            // Try to fetch key values (should be publicly readable)
            client.getList<Map<String, Any>>(
                collection = "s_key_values",
                page = 1,
                perPage = 1
            ).map { result ->
                logInfo("‚úÖ PocketBase connection successful! Found ${result.totalItems} key values")
                true
            }
        } catch (e: Exception) {
            logError("‚ùå PocketBase connection failed", e)
            Result.Error(love.bside.app.core.AppException.Network.NoConnection())
        }
    }
    
    /**
     * Test authentication flow
     */
    suspend fun testAuth(
        client: PocketBaseClient,
        email: String,
        password: String
    ): Result<String> {
        logInfo("üß™ Testing authentication for: $email")
        
        return client.authWithPassword<Map<String, Any>>(
            collection = "users",
            identity = email,
            password = password
        ).map { authResponse ->
            val token = authResponse.token
            val userId = (authResponse.record["id"] as? String) ?: "unknown"
            logInfo("‚úÖ Authentication successful! Token: ${token.take(20)}... UserId: $userId")
            token
        }.onError { error ->
            logError("‚ùå Authentication failed", error)
        }
    }
    
    /**
     * Test CRUD operations
     */
    suspend fun testCrudOperations(
        client: PocketBaseClient
    ): Result<Boolean> {
        logInfo("üß™ Testing CRUD operations...")
        
        // This would require authentication first
        // For now, just test read operations
        return client.getList<Map<String, Any>>(
            collection = "s_key_values",
            page = 1,
            perPage = 5
        ).map { result ->
            logInfo("‚úÖ CRUD test passed! Fetched ${result.items.size} items")
            logDebug("Sample item: ${result.items.firstOrNull()}")
            true
        }.onError { error ->
            logError("‚ùå CRUD test failed", error)
        }
    }
    
    /**
     * Comprehensive health check
     */
    suspend fun healthCheck(
        client: PocketBaseClient,
        includeAuth: Boolean = false,
        testEmail: String? = null,
        testPassword: String? = null
    ): HealthCheckResult {
        logInfo("üè• Running PocketBase health check...")
        
        val results = mutableMapOf<String, Boolean>()
        val errors = mutableListOf<String>()
        
        // Test 1: Connection
        testConnection(client).fold(
            onSuccess = { 
                results["connection"] = true
                AppLogger.info("PocketBaseTest", "  ‚úÖ Connection: OK")
            },
            onFailure = { exception ->
                results["connection"] = false
                errors.add("Connection failed: ${exception.message}")
                AppLogger.error("PocketBaseTest", "  ‚ùå Connection: FAILED")
            }
        )
        
        // Test 2: Read operation
        client.getList<Map<String, Any>>(
            collection = "s_key_values",
            page = 1,
            perPage = 1
        ).fold(
            onSuccess = { _ ->
                results["read"] = true
                AppLogger.info("PocketBaseTest", "  ‚úÖ Read operation: OK")
            },
            onFailure = { exception ->
                results["read"] = false
                errors.add("Read failed: ${exception.message}")
                AppLogger.error("PocketBaseTest", "  ‚ùå Read operation: FAILED")
            }
        )
        
        // Test 3: Authentication (if credentials provided)
        if (includeAuth && testEmail != null && testPassword != null) {
            testAuth(client, testEmail, testPassword).fold(
                onSuccess = { _ ->
                    results["auth"] = true
                    AppLogger.info("PocketBaseTest", "  ‚úÖ Authentication: OK")
                },
                onFailure = { exception ->
                    results["auth"] = false
                    errors.add("Auth failed: ${exception.message}")
                    AppLogger.error("PocketBaseTest", "  ‚ùå Authentication: FAILED")
                }
            )
        }
        
        val allPassed = results.values.all { it }
        val summary = if (allPassed) {
            "‚úÖ All health checks passed!"
        } else {
            "‚ö†Ô∏è Some health checks failed. See details above."
        }
        
        logInfo(summary)
        
        return HealthCheckResult(
            passed = allPassed,
            results = results,
            errors = errors,
            summary = summary
        )
    }
}

/**
 * Result of health check
 */
data class HealthCheckResult(
    val passed: Boolean,
    val results: Map<String, Boolean>,
    val errors: List<String>,
    val summary: String
) {
    fun prettyPrint(): String = buildString {
        appendLine("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        appendLine("‚ïë     PocketBase Health Check Report     ‚ïë")
        appendLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
        
        results.forEach { (test, passed) ->
            val icon = if (passed) "‚úÖ" else "‚ùå"
            appendLine("  $icon $test: ${if (passed) "PASS" else "FAIL"}")
        }
        
        if (errors.isNotEmpty()) {
            appendLine("\n‚ùå Errors:")
            errors.forEach { error ->
                appendLine("  - $error")
            }
        }
        
        appendLine("\n$summary")
        appendLine("\n" + "‚îÄ".repeat(40))
    }
}

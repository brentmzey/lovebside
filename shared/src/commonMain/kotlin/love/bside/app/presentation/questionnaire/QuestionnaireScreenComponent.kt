package love.bside.app.presentation.questionnaire

import com.arkivanov.decompose.ComponentContext
import com.arkivanov.essenty.lifecycle.coroutines.coroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import love.bside.app.data.storage.SessionManager
import love.bside.app.di.getDI
import love.bside.app.domain.models.ProustQuestionnaire
import love.bside.app.domain.models.UserAnswer
import love.bside.app.domain.repository.QuestionnaireRepository
import love.bside.app.ui.components.UiState

interface QuestionnaireScreenComponent {
    val uiState: StateFlow<QuestionnaireUiState>
    fun submitAnswer(questionId: String, answerText: String)
}

data class QuestionnaireUiState(
    override val isLoading: Boolean = false,
    override val data: List<ProustQuestionnaire> = emptyList(),
    override val error: String? = null,
    val answerSubmissionSuccess: Boolean = false
) : UiState<List<ProustQuestionnaire>>

class DefaultQuestionnaireScreenComponent(
    componentContext: ComponentContext
) : QuestionnaireScreenComponent, ComponentContext by componentContext {

    private val di = getDI()
    private val questionnaireRepository: QuestionnaireRepository by di.inject(QuestionnaireRepository::class)
    private val sessionManager: SessionManager by di.inject(SessionManager::class)

    private val _uiState = MutableStateFlow(QuestionnaireUiState())
    override val uiState: StateFlow<QuestionnaireUiState> = _uiState.asStateFlow()

    init {
        fetchActiveQuestions()
    }

    private fun fetchActiveQuestions() {
        _uiState.value = QuestionnaireUiState(isLoading = true)
        coroutineScope().launch {
            val result = questionnaireRepository.getActiveQuestionnaires()
            _uiState.value = result.fold(
                onSuccess = { QuestionnaireUiState(data = it) },
                onFailure = { QuestionnaireUiState(error = it.message) }
            )
        }
    }

    override fun submitAnswer(questionId: String, answerText: String) {
        coroutineScope().launch {
            val userId = sessionManager.getProfile()?.userId ?: return@launch
            val answer = UserAnswer(
                id = "", // ID is generated by the server
                created = kotlinx.datetime.Clock.System.now(),
                updated = kotlinx.datetime.Clock.System.now(),
                userId = userId,
                questionId = questionId,
                answerText = answerText
            )
            val result = questionnaireRepository.submitAnswer(answer)
            if (result.isSuccess) {
                _uiState.value = _uiState.value.copy(answerSubmissionSuccess = true)
            }
        }
    }
}

package love.bside.app.presentation

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import love.bside.app.domain.models.ProustQuestionnaire
import love.bside.app.domain.models.UserAnswer
import love.bside.app.domain.repository.QuestionnaireRepository

data class QuestionnaireUiState(
    val isLoading: Boolean = false,
    val questions: List<ProustQuestionnaire> = emptyList(),
    val error: String? = null,
    val answerSubmissionSuccess: Boolean = false
)

class QuestionnaireViewModel(private val questionnaireRepository: QuestionnaireRepository) {

    private val viewModelScope = CoroutineScope(Dispatchers.Main)

    private val _uiState = MutableStateFlow(QuestionnaireUiState())
    val uiState: StateFlow<QuestionnaireUiState> = _uiState.asStateFlow()

    fun fetchActiveQuestions() {
        _uiState.value = QuestionnaireUiState(isLoading = true)
        viewModelScope.launch {
            val result = questionnaireRepository.getActiveQuestionnaires()
            _uiState.value = result.fold(
                onSuccess = { QuestionnaireUiState(questions = it) },
                onFailure = { QuestionnaireUiState(error = it.message) }
            )
        }
    }

    fun submitAnswer(userId: String, questionId: String, answerText: String) {
        viewModelScope.launch {
            val answer = UserAnswer(
                id = "", // ID is generated by the server
                created = kotlinx.datetime.Clock.System.now(),
                updated = kotlinx.datetime.Clock.System.now(),
                userId = userId,
                questionId = questionId,
                answerText = answerText
            )
            val result = questionnaireRepository.submitAnswer(answer)
            if (result.isSuccess) {
                _uiState.value = _uiState.value.copy(answerSubmissionSuccess = true)
            }
        }
    }
}

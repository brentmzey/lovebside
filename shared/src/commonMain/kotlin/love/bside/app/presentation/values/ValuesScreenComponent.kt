package love.bside.app.presentation.values

import com.arkivanov.decompose.ComponentContext
import com.arkivanov.essenty.lifecycle.coroutines.coroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import love.bside.app.core.AppException
import love.bside.app.core.logError
import love.bside.app.data.storage.SessionManager
import love.bside.app.domain.models.KeyValue
import love.bside.app.domain.models.UserValue
import love.bside.app.domain.repository.ValuesRepository
import org.koin.core.component.KoinComponent
import org.koin.core.component.inject

interface ValuesScreenComponent {
    val uiState: StateFlow<ValuesUiState>
    fun toggleUserValue(valueId: String)
    fun onBack()
}

sealed class ValuesUiState {
    data object Idle : ValuesUiState()
    data object Loading : ValuesUiState()
    data class Success(
        val allValues: List<KeyValue>,
        val userValues: List<UserValue>
    ) : ValuesUiState()
    data class Error(val exception: AppException) : ValuesUiState()
}

class DefaultValuesScreenComponent(
    componentContext: ComponentContext,
    private val onBack: () -> Unit
) : ValuesScreenComponent, ComponentContext by componentContext, KoinComponent {

    private val valuesRepository: ValuesRepository by inject()
    private val sessionManager: SessionManager by inject()

    private val _uiState = MutableStateFlow<ValuesUiState>(ValuesUiState.Idle)
    override val uiState: StateFlow<ValuesUiState> = _uiState.asStateFlow()

    private val userId: String
        get() = sessionManager.getProfile()?.userId ?: ""

    init {
        fetchValues()
    }

    private fun fetchValues() {
        if (userId.isEmpty()) {
            _uiState.value = ValuesUiState.Error(
                AppException.Auth.Unauthorized()
            )
            return
        }
        
        _uiState.value = ValuesUiState.Loading
        coroutineScope().launch {
            valuesRepository.getAllKeyValues()
                .onSuccess { allValues ->
                    valuesRepository.getUserValues(userId)
                        .onSuccess { userValues ->
                            _uiState.value = ValuesUiState.Success(allValues, userValues)
                        }
                        .onError { exception ->
                            logError("Failed to load user values", exception)
                            _uiState.value = ValuesUiState.Error(exception)
                        }
                }
                .onError { exception ->
                    logError("Failed to load all values", exception)
                    _uiState.value = ValuesUiState.Error(exception)
                }
        }
    }

    override fun toggleUserValue(valueId: String) {
        if (userId.isEmpty()) return
        
        val currentState = _uiState.value
        if (currentState !is ValuesUiState.Success) return
        
        coroutineScope().launch {
            val userValue = UserValue(
                id = "", // Will be generated by PocketBase
                created = kotlinx.datetime.Clock.System.now(),
                updated = kotlinx.datetime.Clock.System.now(),
                userId = userId,
                valueId = valueId
            )
            
            val isSelected = currentState.userValues.any { it.valueId == valueId }

            val result = if (isSelected) {
                valuesRepository.removeUserValue(userValue)
            } else {
                valuesRepository.addUserValue(userValue)
            }

            result
                .onSuccess {
                    fetchValues() // Refresh the values
                }
                .onError { exception ->
                    logError("Failed to toggle user value", exception)
                    _uiState.value = ValuesUiState.Error(exception)
                }
        }
    }

    override fun onBack() {
        onBack.invoke()
    }
}

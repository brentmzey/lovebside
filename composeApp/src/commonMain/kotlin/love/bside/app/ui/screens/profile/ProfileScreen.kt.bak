package love.bside.app.ui.screens.profile

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import love.bside.app.data.models.user.Profile
import love.bside.app.ui.components.LoadingIndicator

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProfileScreen(
    profile: Profile?,
    onEditClick: () -> Unit,
    isLoading: Boolean = false,
    modifier: Modifier = Modifier
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Profile") },
                actions = {
                    IconButton(onClick = onEditClick) {
                        Icon(
                            imageVector = Icons.Default.Edit,
                            contentDescription = "Edit profile"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface,
                    titleContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        }
    ) { paddingValues ->
        when {
            isLoading -> {
                LoadingIndicator(
                    message = "Loading profile...",
                    modifier = Modifier.padding(paddingValues)
                )
            }
            profile == null -> {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(paddingValues),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "No profile data",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            else -> {
                LazyColumn(
                    modifier = modifier
                        .fillMaxSize()
                        .padding(paddingValues),
                    contentPadding = PaddingValues(16.dp),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    // Profile Photo
                    item {
                        Surface(
                            modifier = Modifier
                                .size(120.dp)
                                .align(Alignment.CenterHorizontally),
                            shape = MaterialTheme.shapes.extraLarge,
                            color = MaterialTheme.colorScheme.primaryContainer
                        ) {
                            Box(contentAlignment = Alignment.Center) {
                                Icon(
                                    imageVector = Icons.Default.Person,
                                    contentDescription = "Profile photo",
                                    modifier = Modifier.size(60.dp),
                                    tint = MaterialTheme.colorScheme.onPrimaryContainer
                                )
                            }
                        }
                    }
                    
                    // Name
                    item {
                        Column(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = profile.displayName,
                                style = MaterialTheme.typography.headlineMedium,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.onSurface
                            )
                        }
                    }
                    
                    // Location
                    profile.location?.let { location ->
                        item {
                            ProfileInfoCard(
                                title = "Location",
                                content = location
                            )
                        }
                    }
                    
                    // Bio
                    profile.bio?.let { bio ->
                        item {
                            ProfileInfoCard(
                                title = "About",
                                content = bio
                            )
                        }
                    }
                    
                    // Interests
                    profile.interests?.let { interests ->
                        if (interests.isNotEmpty()) {
                            item {
                                ProfileInfoCard(
                                    title = "Interests",
                                    content = interests.joinToString(", ")
                                )
                            }
                        }
                    }
                    
                    // Relationship Type
                    profile.relationshipType?.let { type ->
                        item {
                            ProfileInfoCard(
                                title = "Looking for",
                                content = when (type) {
                                    "friendship" -> "Friendship"
                                    "romantic" -> "Romantic Relationship"
                                    "both" -> "Friendship or Romance"
                                    else -> type
                                }
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun ProfileInfoCard(
    title: String,
    content: String,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.labelLarge,
                color = MaterialTheme.colorScheme.primary,
                fontWeight = FontWeight.SemiBold
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = content,
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

// Preview
@Composable
fun ProfileScreenPreview() {
    val mockProfile = Profile(
        userId = "1",
        displayName = "Alice Johnson",
        bio = "Coffee lover, bookworm, and adventure seeker. Always looking for new experiences and meaningful connections.",
        location = "San Francisco, CA",
        interests = listOf("Reading", "Hiking", "Coffee", "Photography"),
        relationshipType = "both",
        preferences = mapOf()
    )
    
    MaterialTheme {
        ProfileScreen(
            profile = mockProfile,
            onEditClick = {},
            isLoading = false
        )
    }
}
